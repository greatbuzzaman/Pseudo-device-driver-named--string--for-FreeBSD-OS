/*
 * string_module.c - Device driver module for string device.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/bus.h>
#include <sys/conf.h>
#include <sys/uio.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/module.h>
#include <sys/proc.h>
#include <sys/ctype.h>
#include <sys/ioccom.h>

#define BUFFERSIZE 50
MALLOC_DEFINE(M_SBUF, "string_buffer", "buffer for string");

static d_open_t         string_open;
static d_close_t        string_close;
static d_read_t         string_read;
static d_write_t        string_write;
static d_ioctl_t        string_ioctl;

static struct cdev *sdev;

#define S_LOWERCASE     _IOR('S',1,char[BUFFERSIZE])
#define S_UPPERCASE     _IOR('S',2,char[BUFFERSIZE])

char message[BUFFERSIZE];
char *msg;
int openflag=0;
int len=0;

static struct cdevsw string_cdevsw = {
        .d_version =    D_VERSION,
        .d_open =       string_open,
        .d_close =      string_close,
        .d_read =       string_read,
        .d_write =      string_write,
        .d_ioctl =      string_ioctl,
        .d_name =       "string"
};

static int
string_open(struct cdev *dev, int flag, int mode, struct thread *td)
{
        if(openflag!=0){
                uprintf("Device is Already in use : Not Permitted");
                return(EPERM);
        }
        openflag++;
        return(0);
}

static int
string_close(struct cdev *dev, int flag, int mode, struct thread *td)
{
        openflag--;
        return(0);
}

static int
string_read(struct cdev *dev, struct uio *uio, int flags)
{
        int error=0,size;
        size=MIN(uio->uio_resid,(len-uio->uio_offset > 0) ? len-uio->uio_offset : 0);
        error=uiomove(msg+ uio->uio_offset,size,uio);
        if(error!=0)
                uprintf("Read operation failed\n");
        return(error);
}

static int
string_write(struct cdev *dev, struct uio *uio, int flags)
{
        int error=0,size;
        /*  write from the beginning.*/
        size=MIN(uio->uio_resid,(BUFFERSIZE-1-uio->uio_offset > 0) ? BUFFERSIZE-1-uio->uio_offset : 0);
        if(size==0)
                return (error);

        error=uiomove(msg,size,uio);
        if(error!=0)
        {
                uprintf("write failed\n");
                return (error);
        }
        msg[size]='\0';
        len=size;
        return (error);
}

static int
string_ioctl(struct cdev *dev, u_long cmd, caddr_t arg, int flag, struct thread *td)
{
        int error=0;
        char *str,*chng;
        char temp[BUFFERSIZE];
        str=msg;
        chng=temp;
        switch(cmd){
        case S_LOWERCASE:
                for(;*str;str++){
                        if (*(str) < 'A' || *(str) > 'Z') {
                                *chng++=*str;
                                str++;
                        }
                        else if(*str=='\0')
                                break;
                        else {
                               *chng++ = *str + 32;
                               str++;
                        }
                }
                *chng='\0';
                strcpy(arg,temp);
                printf("Lowercase string is %s",temp);
                break;
        case S_UPPERCASE:
                for(;*str;str++){
                        if (*(str) < 'a' || *(str) > 'z') {
                                *chng++=*str;
                                str++;
                        }
                        else if(*str=='\0')
                                break;
                        else {
                               *chng++ = *str-32;
                               str++;
                        }
                }
                *chng='\0';
                strcpy(arg,temp);
                printf("Uppercase string is %s",temp);
                break;
        default:
                error= ENOTTY;
                break;
        }
        return(0);
}

static int
string_load(module_t mod, int what, void *arg)
{
        int error = 0;
        switch(what) {
                case MOD_LOAD:
                        msg=malloc(BUFFERSIZE,M_SBUF,M_WAITOK);
                        sdev = make_dev(&string_cdevsw, 0, UID_ROOT, GID_WHEEL,
                                0666, "string");
                        break;
                case MOD_UNLOAD:
                        destroy_dev(sdev);
                        free(msg,M_SBUF);
                        break;
                default:
                        error = EINVAL;
                        break;
        }
        return(error);
}

DEV_MODULE(string_module, string_load, NULL);
